/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("\n/*\n *  These procedures use Agora Video Call SDK for Web to enable local and remote\n *  users to join and leave a Video Call channel managed by Agora Platform.\n */\n\n/*\n *  Create an {@link https://docs.agora.io/en/Video/API%20Reference/web_ng/interfaces/iagorartcclient.html|AgoraRTCClient} instance.\n *\n *  @param {string} mode - The {@link https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/clientconfig.html#mode| streaming algorithm} used by Agora SDK.\n *  @param  {string} codec - The {@link https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/clientconfig.html#codec| client codec} used by the browser.\n */\nvar client = AgoraRTC.createClient({ mode: \"rtc\", codec: \"vp8\" });\n\n/*\n *  Clear the video and audio tracks used by `client` on initiation.\n */\nvar localTracks = {\n  videoTrack: null,\n  audioTrack: null\n};\n\n/*\n *  On initiation no users are connected.\n */\nvar remoteUsers = {};\n\n/*\n *  On initiation. `client` is not attached to any project or channel for any specific user.\n */\nvar options = {\n  appid: null,\n  channel: null,\n  uid: null,\n  token: null\n};\n\nvar currentStream = null;\n\n/*\n * When this page is called with parameters in the URL, this procedure\n * attempts to join a Video Call channel using those parameters.\n */\n$(() => {\n  var urlParams = new URL(location.href).searchParams;\n  options.appid = urlParams.get(\"appid\");\n  options.channel = urlParams.get(\"channel\");\n  options.token = urlParams.get(\"token\");\n  options.uid = urlParams.get(\"uid\");\n  currentStream = urlParams.get(\"stream-source\");\n  if (options.appid && options.channel) {\n    $(\"#uid\").val(options.uid);\n    $(\"#appid\").val(options.appid);\n    $(\"#token\").val(options.token);\n    $(\"#channel\").val(options.channel);\n    $(\"#join-form\").submit();\n  }\n})\n\n/*\n * When a user clicks Join or Leave in the HTML form, this procedure gathers the information\n * entered in the form and calls join asynchronously. The UI is updated to match the options entered\n * by the user.\n */\n$(\"#join-form\").submit(async function (e) {\n  e.preventDefault();\n  $(\"#join\").attr(\"disabled\", true);\n  try {\n    options.appid = $(\"#appid\").val();\n    options.token = $(\"#token\").val();\n    options.channel = $(\"#channel\").val();\n    options.uid = $(\"#uid\").val();\n    currentStream = $(\"#stream-source\").val();\n    console.log(currentStream);\n    await join();\n    if(options.token) {\n      $(\"#success-alert-with-token\").css(\"display\", \"block\");\n    } else {\n      $(\"#success-alert a\").attr(\"href\", `index.html?appid=${options.appid}&channel=${options.channel}&token=${options.token}`);\n      $(\"#success-alert\").css(\"display\", \"block\");\n    }\n  } catch (error) {\n    console.error(error);\n  } finally {\n    $(\"#leave\").attr(\"disabled\", false);\n    $(\"#switch-channel\").attr(\"disabled\", false);\n  }\n})\n\n/*\n * Called when a user clicks Leave in order to exit a channel.\n */\n$(\"#leave\").click(function (e) {\n  leave();\n})\n\n\n/*\n * Called when a user clicks Switch button to switch input stream.\n */\n $(\"#switch-channel\").click(function (e) {\n    switchChannel();\n })\n\n/*\n * Join a channel, then create local video and audio tracks and publish them to the channel.\n */\nasync function join() {\n\n  // Add an event listener to play remote tracks when remote user publishes.\n  client.on(\"user-published\", handleUserPublished);\n  client.on(\"user-unpublished\", handleUserUnpublished);\n\n  // Default publish local microphone audio track to both options.\n  localTracks.audioTrack = await AgoraRTC.createMicrophoneAudioTrack();\n\n  if (currentStream == \"camera\") {\n    // Join a channel and create local tracks. Best practice is to use Promise.all and run them concurrently.\n    [ options.uid, localTracks.videoTrack ] = await Promise.all([\n      // Join the channel.\n      client.join(options.appid, options.channel, options.token || null, options.uid || null),\n      // Create tracks to the localcamera.\n      AgoraRTC.createCameraVideoTrack()\n    ]);\n\n    // Publish the local video and audio tracks to the channel.\n    \n  } else {\n  \n      var videoFromDiv = document.getElementById(\"sample-video\");\n      // https://developers.google.com/web/updates/2016/10/capture-stream - captureStream() \n      // can only be called after the video element is able to play video;\n      try {\n        videoFromDiv.play();\n      } catch (e) {\n        console.log(error);\n      }\n      //specify mozCaptureStream for Firefox.\n      var videoStream = (navigator.userAgent.indexOf(\"Firefox\") > -1)? videoFromDiv.mozCaptureStream():videoFromDiv.captureStream();\n      [ options.uid, localTracks.videoTrack ] = await Promise.all([\n        // Join the channel.\n        client.join(options.appid, options.channel, options.token || null, options.uid || null),\n        // Create tracks to the customized video source.\n        AgoraRTC.createCustomVideoTrack({mediaStreamTrack:videoStream.getVideoTracks()[0]})\n      ]);\n    }\n\n  await client.publish(Object.values(localTracks));\n  // Play the local video track to the local browser and update the UI with the user ID.\n  localTracks.videoTrack.play(\"local-player\");\n  $(\"#local-player-name\").text(`localVideo(${options.uid})`);\n  console.log(\"publish success\");\n}\n\n/*\n * Stop all local and remote tracks then leave the channel.\n */\n\nasync function stopCurrentChannel() {\n  for (trackName in localTracks) {\n    var track = localTracks[trackName];\n    if(track) {\n      track.stop();\n      track.close();\n      localTracks[trackName] = undefined;\n    }\n  }\n\n  // Remove remote users and player views.\n  remoteUsers = {};\n  $(\"#remote-playerlist\").html(\"\");\n  $(\"#local-player-name\").text(\"\");\n\n  // leave the channel\n  await client.leave();\n  console.log(\"client leaves channel success\");\n}\nasync function leave() {\n  \n  await stopCurrentChannel();\n  $(\"#join\").attr(\"disabled\", false);\n  $(\"#leave\").attr(\"disabled\", true);\n  $(\"#switch-channel\").attr(\"disabled\", true);\n}\n\n/*\n *\n */\n async function switchChannel() {\n  console.log(\"switchChannel entered\");\n  let prev = currentStream;\n  currentStream = $(\"#stream-source\").val();\n\n  if (currentStream == prev) {\n    console.log(\"no change from \" + prev + \" to\" + currentStream);\n  } else if (currentStream != prev){\n    console.log(\"channel is switched from \" + prev + \" to\" + currentStream);\n    await stopCurrentChannel().then(join());\n   //await join();\n    //TO-DO\n  }\n }\n\n\n/*\n * Add the local use to a remote channel.\n *\n * @param  {IAgoraRTCRemoteUser} user - The {@link  https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/iagorartcremoteuser.html| remote user} to add.\n * @param {trackMediaType - The {@link https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/itrack.html#trackmediatype | media type} to add.\n */\nasync function subscribe(user, mediaType) {\n  const uid = user.uid;\n  // subscribe to a remote user\n  await client.subscribe(user, mediaType);\n  console.log(\"subscribe success\");\n  if (mediaType === 'video') {\n    const player = $(`\n      <div id=\"player-wrapper-${uid}\">\n        <p class=\"player-name\">remoteUser(${uid})</p>\n        <div id=\"player-${uid}\" class=\"player\"></div>\n      </div>\n    `);\n    $(\"#remote-playerlist\").append(player);\n    user.videoTrack.play(`player-${uid}`);\n  }\n  if (mediaType === 'audio') {\n    user.audioTrack.play();\n  }\n}\n\n/*\n * Add a user who has subscribed to the live channel to the local interface.\n *\n * @param  {IAgoraRTCRemoteUser} user - The {@link  https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/iagorartcremoteuser.html| remote user} to add.\n * @param {trackMediaType - The {@link https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/itrack.html#trackmediatype | media type} to add.\n */\nfunction handleUserPublished(user, mediaType) {\n  const id = user.uid;\n  remoteUsers[id] = user;\n  subscribe(user, mediaType);\n}\n\n/*\n * Remove the user specified from the channel in the local interface.\n *\n * @param  {string} user - The {@link  https://docs.agora.io/en/Voice/API%20Reference/web_ng/interfaces/iagorartcremoteuser.html| remote user} to remove.\n */\nfunction handleUserUnpublished(user, mediaType) {\n  if (mediaType === 'video') {\n    const id = user.uid;\n    delete remoteUsers[id];\n    $(`#player-wrapper-${id}`).remove();\n\n  }\n}\n\n\n//# sourceURL=webpack://test/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;